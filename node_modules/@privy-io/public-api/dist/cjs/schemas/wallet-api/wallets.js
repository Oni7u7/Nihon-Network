"use strict";var e=require("zod"),t=require("@privy-io/api-base"),i=require("../api.js"),a=require("../core.js"),r=require("./export.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const o=e.z.enum(["secp256k1","ed25519"]),n=e.z.string().regex(/^[mM]'?(\/\d+'?)*$/),s=e.z.literal("ECDSA"),l=e.z.literal("EdDSA"),p=e.z.union([s,l]),d=e.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'"),z=e.z.custom((e=>"string"==typeof e&&e.startsWith("0x")));let c=e.z.object({address:a.SolanaWalletAddress.optional(),chain_type:e.z.literal("solana").optional(),wallet_id:e.z.string().optional()}),g=e.z.object({address:a.WalletAddress.optional(),chain_type:e.z.literal("ethereum").optional(),wallet_id:e.z.string().optional()});const h=e.z.enum(["root","manager","delegated-actions"]).nullable(),u=e.z.object({method:e.z.literal("signTransaction"),params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(c).strict(),m=e.z.object({method:e.z.literal("signAndSendTransaction"),caip2:d,params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(c).strict(),_=e.z.object({method:e.z.literal("signMessage"),params:e.z.object({message:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(c).strict(),b=e.z.string().startsWith("0x").refine((e=>!e.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points");let x=e.z.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const y=e.z.union([b,x],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),j=e.z.object({from:a.WalletAddress.optional(),to:a.WalletAddress.optional(),chain_id:y.optional(),nonce:y.optional(),data:b.optional(),value:y.optional(),type:e.z.union([e.z.literal(0),e.z.literal(1),e.z.literal(2)]).optional(),gas_limit:y.optional(),gas_price:y.optional(),max_fee_per_gas:y.optional(),max_priority_fee_per_gas:y.optional()}).strict(),A=e.z.object({method:e.z.literal("eth_signTransaction"),params:e.z.object({transaction:j}).strict()}).merge(g).strict(),I=e.z.object({method:e.z.literal("eth_sendTransaction"),caip2:d,params:e.z.object({transaction:j}).strict()}).merge(g).strict(),v=e.z.object({message:e.z.string(),encoding:e.z.union([e.z.literal("utf-8"),e.z.literal("hex")])}).strict(),R=e.z.object({method:e.z.literal("personal_sign"),params:v}).merge(g).strict(),S=e.z.object({method:e.z.literal("secp256k1_sign"),params:e.z.object({hash:z}).strict()}).merge(g).strict(),W=e.z.object({params:e.z.object({hash:z}).strict()}).strict(),T=e.z.record(e.z.string(),e.z.any()),D=e.z.object({name:e.z.string(),version:e.z.string(),chainId:e.z.number(),verifyingContract:e.z.string()}).merge(e.z.object({}).catchall(e.z.any())),E=e.z.union([D,T]),P=e.z.record(e.z.array(e.z.object({name:e.z.string(),type:e.z.string()}))),f=e.z.object({method:e.z.literal("eth_signTypedData_v4"),params:e.z.object({typed_data:e.z.object({domain:E,types:P,message:e.z.record(e.z.string(),e.z.any()),primary_type:e.z.string()}).strict()}).strict()}).merge(g).strict(),k=e.z.object({address:e.z.string(),method:e.z.literal("exportPrivateKey"),params:r.PrivateKeyExportInput}).strict(),w=e.z.discriminatedUnion("method",[A,I,R,f,S]),C=e.z.discriminatedUnion("method",[u,m,_]),K=e.z.union([w,C,k]),q=e.z.object({method:e.z.literal("signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("base64")})}),M=e.z.object({method:e.z.literal("signAndSendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:d}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),O=e.z.object({method:e.z.literal("signMessage"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("base64")})}),U=e.z.object({method:e.z.literal("eth_signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("rlp")})}),B=e.z.object({method:e.z.literal("eth_sendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:d}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),F=e.z.object({method:e.z.literal("personal_sign"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),H=e.z.object({method:e.z.literal("secp256k1_sign"),data:e.z.object({signature:b,encoding:e.z.literal("hex")})}),L=e.z.object({method:e.z.literal("eth_signTypedData_v4"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),N=e.z.object({method:e.z.literal("exportPrivateKey"),data:r.PrivateKeyExportInput}),Q=e.z.object({data:e.z.object({signature:b,encoding:e.z.literal("hex")}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}).strict(),V=e.z.discriminatedUnion("method",[q,M,O,U,B,F,H,L,N]),$=e.z.object({display_name:e.z.string().optional(),public_key:e.z.string(),role:h.optional()}),Z=e.z.literal("cosmos"),G=e.z.literal("stellar"),J=e.z.union([Z,G]),X=e.z.union([e.z.literal("solana"),e.z.literal("ethereum")]),Y=e.z.union([J,X]),ee=e.z.object({id:e.z.string(),address:e.z.string(),public_key:e.z.string().optional(),created_at:e.z.number(),chain_type:Y,policy_ids:e.z.array(e.z.string()),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2(),override_policy_ids:e.z.array(e.z.string()).optional()})),owner_id:e.z.string().cuid2().nullable()}),te=e.z.string().cuid2(),ie=e.z.string(),ae=e.z.object({public_key:ie}).strict(),re={owner:ae.nullable().optional(),owner_id:te.nullable().optional()};let oe=e.z.array(e.z.string().cuid2()).max(1,"Only one policy ID can be set").optional();const ne=e.z.array(e.z.object({signer_id:te,override_policy_ids:oe}).strict()),se=e.z.object({chain_type:Y,policy_ids:oe,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:ne.optional(),...re}),le=se.refine((e=>{let t=void 0!==e.authorization_key_ids||void 0!==e.authorization_threshold,i=void 0!==e.additional_signers;return!t||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((e=>void 0===e.authorization_threshold||e.authorization_threshold>=1&&e.authorization_key_ids&&e.authorization_threshold<=e.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((e=>{throw new t.InvalidInputError(e.error.message,t.PrivyErrorCode.INVALID_DATA)})),pe=e.z.object({id:e.z.string(),chain_type:Y,address:e.z.string(),authorization_threshold:e.z.number().optional()}),de=e.z.object({wallet_id:e.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),ze=e.z.object({id:e.z.string()}),ce=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),role:h,created_at:e.z.number()}),ge=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),created_at:e.z.number()}),he=i.Pagination.extend({chain_type:Y.optional()}).strict(),ue=e.z.object({policy_ids:oe,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:ne.optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.authorization_threshold&&0!==e.authorization_threshold&&(e.authorization_threshold<0&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===e.authorization_key_ids&&t.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),e.authorization_key_ids&&e.authorization_threshold>e.authorization_key_ids.length&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))}));exports.AdditionalSignerInput=ne,exports.AuthorizationKeyDashboardResponse=ce,exports.AuthorizationKeyResponse=ge,exports.AuthorizationKeyRole=h,exports.BaseWalletApiCreateInput=se,exports.CAIP2=d,exports.ChainType=Y,exports.Cosmos=Z,exports.CurrentTypedDataDomainInputParams=D,exports.CurveSigningChainTypes=J,exports.CurveType=o,exports.ECDSA=s,exports.EdDSA=l,exports.FirstClassChainTypes=X,exports.HDPath=n,exports.Hash=z,exports.Hex=b,exports.KeyQuorumId=te,exports.LegacyTypedDataDomainInputParams=T,exports.OwnerInput=ae,exports.OwnerInputFields=re,exports.P256PublicKey=ie,exports.Quantity=y,exports.SigningAlgorithm=p,exports.Stellar=G,exports.TypedDataDomainInputParams=E,exports.TypedDataTypesInputParams=P,exports.UnsignedEthereumTransaction=j,exports.WalletApiCreateInput=le,exports.WalletApiCreateResponse=pe,exports.WalletApiEthereumPersonalSignRpcInput=R,exports.WalletApiEthereumPersonalSignRpcInputParams=v,exports.WalletApiEthereumPersonalSignRpcResponse=F,exports.WalletApiEthereumRpcInput=w,exports.WalletApiEthereumSecp256k1SignRpcInput=S,exports.WalletApiEthereumSecp256k1SignRpcResponse=H,exports.WalletApiEthereumSendTransactionRpcInput=I,exports.WalletApiEthereumSendTransactionRpcResponse=B,exports.WalletApiEthereumSignTransactionRpcInput=A,exports.WalletApiEthereumSignTransactionRpcResponse=U,exports.WalletApiEthereumSignTypedDataRpcInput=f,exports.WalletApiEthereumSignTypedDataRpcResponse=L,exports.WalletApiExportPrivateKeyRpcInput=k,exports.WalletApiExportPrivateKeyRpcResponse=N,exports.WalletApiRawSignInput=W,exports.WalletApiRawSignResponse=Q,exports.WalletApiRegisterAuthorizationKeyInput=$,exports.WalletApiRevokeAuthorizationKeyInput=ze,exports.WalletApiRpcInput=K,exports.WalletApiRpcResponse=V,exports.WalletApiSolanaRpcInput=C,exports.WalletApiSolanaSignAndSendTransactionRpcInput=m,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=M,exports.WalletApiSolanaSignMessageRpcInput=_,exports.WalletApiSolanaSignMessageRpcResponse=O,exports.WalletApiSolanaSignTransactionRpcInput=u,exports.WalletApiSolanaSignTransactionRpcResponse=q,exports.WalletIdFromPath=de,exports.WalletResponse=ee,exports.WalletUpdateInput=ue,exports.WalletsSearchInput=he;
