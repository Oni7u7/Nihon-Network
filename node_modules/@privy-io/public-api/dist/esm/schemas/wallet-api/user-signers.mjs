import{z as e}from"zod";import{Email as t}from"../core.mjs";import{BaseWalletApiCreateInput as r,WalletResponse as i}from"./wallets.mjs";import"bs58";import"libphonenumber-js/max";import"viem";import"@privy-io/api-base";import"../api.mjs";import"./export.mjs";const o=e.object({type:e.literal("email"),address:t}).strict(),s=e.object({type:e.literal("custom_auth"),custom_user_id:e.string().min(1).max(256)}).strict();let a=r.omit({owner:!0,owner_id:!0,additional_signers:!0,authorization_key_ids:!0,authorization_threshold:!0});const n=e.object({wallets:e.array(a),primary_signer:e.object({subject_id:e.string()}).strict(),recovery_user:e.object({linked_accounts:e.array(e.union([o,s])).min(1).max(2).refine((e=>{if(2===e.length){let t=e.filter((e=>"email"===e.type)),r=e.filter((e=>"custom_auth"===e.type));return 1===t.length&&1===r.length}return!0}),{message:"Must have either one email and one custom JWT account, or one of each"})}).strict()}).strict(),c=e.object({wallets:e.array(i),recovery_user_id:e.string()}).strict(),m=e.object({user_jwt:e.string({required_error:"User JWT must be provided",invalid_type_error:"User JWT must be a string"}),encryption_type:e.literal("HPKE"),recipient_public_key:e.string({required_error:"Recipient public key must be provided",invalid_type_error:"Recipient public key must be a string"})}).strict(),p=e.object({encrypted_authorization_key:e.object({encryption_type:e.literal("HPKE"),encapsulated_key:e.string(),ciphertext:e.string()}),expires_at:e.number(),wallets:e.array(i)}).strict();export{s as ImportCustomJwtAccountInput,o as ImportEmailAccountInput,m as UserSignersAuthenticateInput,p as UserSignersAuthenticateResponse,n as WalletsWithRecoveryRequest,c as WalletsWithRecoveryResponse};
